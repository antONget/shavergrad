from aiogram import Router, F, Bot
import logging
import asyncio
import datetime
import requests
from services.geolocation import check_adress, check_adress_lon_alt
import re
from aiogram.filters import CommandStart, and_f, or_f, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.fsm.context import FSMContext
from config_data.config import Config, load_config
from module.database import create_table_user, select_row_table_users, insert_data_table_users,\
    select_all_category_table_dish, select_all_data_table_promotion, select_dish_in_category, select_row_id_dish, \
    insert_data_table_number_order, create_table_number_order, create_table_orders, insert_data_table_orders, \
    select_row_table_number_order, update_table_orders, select_data_table_orders_to_order_id, \
    select_data_table_orders_idorder_iddish, update_status_table_number_id_order, update_status_table_number_adress, \
    update_status_table_number_comment, select_all_manager, select_data_table_orders, select_id_number_order, \
    update_phone_users, delete_table_orders
from keyboards.keyboards_user import keyboard_confirm_phone, keyboards_get_phone, keyboards_main_menu,\
    keyboards_list_category, keyboard_paydish, keyboards_list_category_nav, keyboard_select_portion, \
    keyboard_continue_register, keyboard_confirm_register, keyboard_change_order, keyboard_pass_comment, keyboard_get_location
from filter.admin_filter import filter_category, comand_user_admin
from services.call_phone import call_to_phone
#
router = Router()
config: Config = load_config()
#
#
class Form_user(StatesGroup):
    name_user = State()
    phone_user = State()
    adress_user = State()
    comment_order = State()
#
user_dict = {}


def get_telegram_user(user_id: int, bot_token: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
    :param user_id: telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot_token: TOKEN –±–æ—Ç–∞
    :return: —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º
    """
    url = f'https://api.telegram.org/bot{bot_token}/getChat'
    data = {'chat_id': user_id}
    response = requests.post(url, data=data)
    print(response.json())
    return response.json()


def validate_russian_phone_number(phone_number):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    pattern = re.compile(r'^(\+7|8|7)?(\d{10})$')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω—É
    match = pattern.match(phone_number)

    return bool(match)

@router.message(or_f(CommandStart(), lambda message: comand_user_admin(message)))
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    logging.info(f'process_start_command_admin: {message.chat.id}')
    create_table_user()
    await message.answer(text=f"–î—Ä—É–∑—å—è, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç ¬´–®–∞–≤–µ—Ä–≥—Ä–∞–¥¬ª!\n"
                              f"–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–∞–∫–æ—Ä–º–∏—Ç—å –≤–∫—É—Å–Ω–µ–π—à–µ–π —à–∞–≤–µ—Ä–º–æ–π –∏ –º–æ—â–Ω–µ–π—à–∏–º–∏ –±—É—Ä–≥–µ—Ä–∞–º–∏.")
    await asyncio.sleep(3)
    await message.answer(text="–í—ã –º–æ–∂–µ—Ç–µ:\n"
                              "üçΩÔ∏è –ø—Ä–∏–π—Ç–∏ –∫ –Ω–∞–º –≤ –∫–∞—Ñ–µ –ø–æ –∞–¥—Ä–µ—Å—É: –í–∏—à–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 2 (–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-23:00)\n"
                              "ü§≥–∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å 10:30 –¥–æ 22:30.")
    row_user = select_row_table_users(message.chat.id)
    # print(row_user)
    if not row_user:
        await message.answer(text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(Form_user.name_user)
    else:
        await message.answer(text=f'{row_user[2]}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n'
                                  f'—Ç–µ–ª–µ—Ñ–æ–Ω: {row_user[3]}',
                             reply_markup=keyboard_confirm_phone())


@router.message(F.text, StateFilter(Form_user.name_user))
async def get_name_user(message: Message, state: FSMContext) -> None:
    await state.update_data(user_name=message.text)
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª üëá',
                         reply_markup=keyboards_get_phone())
    await state.set_state(Form_user.phone_user)


@router.callback_query(F.data == 'edit_phone')
async def press_button_edit_phone(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'press_button_edit_phone: {callback.message.chat.id}')
    # await state.update_data(user_name=callback.message.text)
    await callback.message.answer(text='–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω',
                                  reply_markup=keyboards_get_phone())
    await state.set_state(Form_user.phone_user)


@router.callback_query(F.data == 'continue_user')
async def press_button_continue_user(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'press_button_continue_user: {callback.message.chat.id}')
    await callback.message.answer(text='–î–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üç¥–ú–µ–Ω—é¬ª. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π '
                                       '–∑–∞–∫–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É.',
                                  reply_markup=keyboards_main_menu())
    await state.set_state(default_state)


@router.message(StateFilter(Form_user.phone_user))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    logging.info(f'get_phone_user: {message.chat.id}')
    if message.contact:
        phone = str(message.contact.phone_number)
        # print(phone)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    await state.update_data(user_phone=phone)
    user_dict[message.chat.id] = await state.get_data()
    if not select_row_table_users(message.chat.id):
        insert_data_table_users(telegram_id=message.chat.id,
                                name=user_dict[message.chat.id]['user_name'],
                                phone=user_dict[message.chat.id]['user_phone'])
    else:
        update_phone_users(telegram_id=message.chat.id,
                           phone=phone)
    await message.answer(text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ"
                              " –≤—ã–ø–∞–¥–∞—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –ø–∞–Ω–µ–ª–∏ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º: ¬´üç¥–ú–µ–Ω—é ¬ª.")
    await message.answer(text='–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è üè† –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                         reply_markup=keyboards_main_menu())
    await state.set_state(default_state)
#
#
@router.message(F.text == 'üè†')
async def press_button_home(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                         reply_markup=keyboards_main_menu())


@router.message(F.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def press_button_contact(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAIBq2XIoTRjF0VDFI7Dywq5fazj3hrBAAKk2zEbczhISps0ZgABYONr5gEAAwIAA3gAAzQE',
                               caption="""–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º! –û—Ä–∏–µ–Ω—Ç–∏—Ä: –≤–Ω–µ—à–Ω—è—è —á–∞—Å—Ç—å —É–≥–ª–∞ –¥–æ–º–∞

10:00-23:00 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö
–í–∏—à–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞ 2""")
#
#
@router.message(F.text == 'üè∑Ô∏è –ê–∫—Ü–∏–∏')
async def press_button_promotion(message: Message):
    list_promotion = select_all_data_table_promotion()
    for promo in list_promotion:
        # print(promo)
        if promo[2] != 'none':
            await message.answer_photo(photo=promo[2],
                                       caption=promo[1])
        else:
            await message.answer(text=promo[1])
#
#
@router.message(F.text == 'üç¥ –ú–µ–Ω—é')
async def press_button_menu(message: Message):
    list_category = select_all_category_table_dish()
    keyboard = keyboards_list_category(list_category)
    await message.answer(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>600 —Ä—É–±.</b>\n"
                              f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:",
                         reply_markup=keyboard)
#
#
@router.message(lambda message: filter_category(message.text))
async def press_button_category(message: Message, state: FSMContext):
    logging.info(f'press_button_category: {message.chat.id}')
    category = message.text
    print(category)
    await state.update_data(select_category=category)
    await state.update_data(num_block=1)
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤ —Å—Ç–æ–ø —Å–ø–∏—Å–∫–µ
    list_id_dish_category = select_dish_in_category(category)
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ –ø–µ—Ä–≤–æ–π –≤ —Å–ø–∏—Å–∫–µ –ø–æ –µ–≥–æ –∞–π–¥–∏
    info_dish = select_row_id_dish(list_id_dish_category[0][0])
    await message.answer_photo(photo=info_dish[5],
                               caption=f'<b>{info_dish[1]}</b>\n\n'
                                       f'–û–ø–∏—Å–∞–Ω–∏–µ: {info_dish[4]}\n',
                               reply_markup=keyboard_paydish(cost=info_dish[2], id_dish=info_dish[0],
                                                             list_id_dish_category=list_id_dish_category))




# @router.message(lambda message: filter_category(message.text))
# async def press_button_category(message: Message, state: FSMContext):
#     # logging.info(f'press_button_category: {message.chat.id}')
#     category = message.text
#     print(category)
#     await state.update_data(select_category=category)
#     await state.update_data(num_block=1)
#     list_id_dish_category = select_dish_in_category(category)
#     # print(list_id_dish_category)
#     back = 0
#     forward = 2
#     count = 3
#
#     len_list = len(list_id_dish_category)
#     int_block = len_list // count
#     remain_block = len_list % count
#     if remain_block:
#         int_block += 1
#     for id_dish in list_id_dish_category[back*count:(forward-1)*count]:
#         # print('id_dish', id_dish)
#         row_dish = select_row_id_dish(id_dish[0])
#         # print('row_dish', row_dish)
#         # –µ—Å–ª–∏ –Ω–µ –≤ —Å—Ç–æ–ø –ª–∏—Å—Ç–µ
#         if not row_dish[-1]:
#             await message.answer_photo(photo=row_dish[-2],
#                                        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {row_dish[1]}\n'
#                                                f'–°–æ—Å—Ç–∞–≤: {row_dish[4]}',
#                                        reply_markup=keyboard_paydish(row_dish[2], row_dish[0]))
#     list_category = select_all_category_table_dish()
#     await message.answer(text=f"–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –ª–∏—Å—Ç–∞–π—Ç–µ\n"
#                               f" ‚è™ –ù–∞–∑–∞–¥ üè† –í–ø–µ—Ä–µ–¥ ‚è© "
#                               f"–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá",
#                          reply_markup=keyboards_list_category_nav(list_category))
# #
# #
# @router.message(or_f(F.text == '<< –ù–∞–∑–∞–¥', F.text == '–í–ø–µ—Ä–µ–¥ >>'))
# async def press_button_back_forward(message: Message, state: FSMContext):
#     """
#     –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - << –ù–∞–∑–∞–¥ –∏ –í–ø–µ—Ä–µ–¥ >> —É–≤–µ–ª–∏—á–∏–≤–∞—è
#     –Ω–æ–º–µ—Ä –≤—ã–≤–æ–¥–∏–º–æ –±–ª–æ–∫–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –±–ª—é–¥
#     :param message:
#     :param state:
#     :return:
#     """
#     logging.info(f'press_button_back_forward: {message.chat.id}')
#     user_dict[message.chat.id] = await state.get_data()
#     category = user_dict[message.chat.id]['select_category']
#     num_block = user_dict[message.chat.id]['num_block']
#     print("num_block", num_block)
#     list_id_dish_category = select_dish_in_category(category)
#     print(list_id_dish_category)
#     count = 3
#     len_list = len(list_id_dish_category)
#     int_block = len_list // count
#     remain_block = len_list % count
#     if remain_block:
#         int_block += 1
#     print('int_block: ', int_block)
#     back = 0
#     forward = 1
#     if message.text == '<< –ù–∞–∑–∞–¥':
#         num_block -= 1
#         if num_block == 1:
#             back = 0
#             forward = 2
#             await state.update_data(num_block=back+1)
#         else:
#             back = num_block - 1
#             forward = num_block + 1
#             await state.update_data(num_block=back+1)
#     elif message.text == '–í–ø–µ—Ä–µ–¥ >>':
#         num_block += 1
#         if num_block == int_block:
#             back = int_block - 1
#             forward = int_block + 1
#             await state.update_data(num_block=back+1)
#         else:
#             back = num_block - 1
#             forward = num_block + 1
#             await state.update_data(num_block=back+1)
#
#     print('back:', back, 'forward:', forward)
#     for id_dish in list_id_dish_category[back*count:(forward-1)*count]:
#         # print('id_dish', id_dish)
#         row_dish = select_row_id_dish(id_dish[0])
#         # print('row_dish', row_dish)
#         # –µ—Å–ª–∏ –Ω–µ –≤ —Å—Ç–æ–ø –ª–∏—Å—Ç–µ
#         if not row_dish[-1]:
#             await message.answer_photo(photo=row_dish[-2],
#                                        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {row_dish[1]}\n'
#                                                f'–°–æ—Å—Ç–∞–≤: {row_dish[4]}',
#                                        reply_markup=keyboard_paydish(row_dish[2], row_dish[0]))
#     list_category = select_all_category_table_dish()
#     await message.answer(text=f"–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –ª–∏—Å—Ç–∞–π—Ç–µ\n"
#                               f" ‚è™ –ù–∞–∑–∞–¥ üè† –í–ø–µ—Ä–µ–¥ ‚è© "
#                               f"–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá",
#                          reply_markup=keyboards_list_category_nav(list_category))
#
#
@router.callback_query(F.data.startswith('showdish'))
async def press_button_show_dish(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –±–ª—é–¥–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    :param callback: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è showdish_id_dish
    :param state:
    :return:
    """
    logging.info(f'press_button_payment_dish: {callback.message.chat.id}')
    id_dish = int(callback.data.split('_')[1])
    info_dish = select_row_id_dish(id_dish)
    user_dict[callback.message.chat.id] = await state.get_data()
    category = user_dict[callback.message.chat.id]['select_category']
    list_id_dish_category = select_dish_in_category(category)
    print(callback.message.message_id)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=(callback.message.message_id))
    await callback.message.answer_photo(photo=info_dish[5],
                                        caption=f'<b>{info_dish[1]}</b>\n\n'
                                                f'–û–ø–∏—Å–∞–Ω–∏–µ: {info_dish[4]}\n',
                                        reply_markup=keyboard_paydish(cost=info_dish[2], id_dish=info_dish[0],
                                                                      list_id_dish_category=list_id_dish_category))


@router.callback_query(F.data.startswith('paydish'))
async def press_button_payment_dish(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    :param callback: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è paydish_id_dish
    :param state:
    :return:
    """
    logging.info(f'press_button_payment_dish: {callback.message.chat.id}')
    id_dish = int(callback.data.split('_')[1])
    info_dish = select_row_id_dish(id_dish)
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    current_date = datetime.datetime.now()
    current_date_string = current_date.strftime('%m/%d/%y_%H:%M:%S')
    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    number_order = f'{callback.message.chat.id}_{current_date_string}'
    create_table_number_order()
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_number_order = select_row_table_number_order(telegram_id=callback.message.chat.id)
    print('data_number_order', data_number_order)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã, —Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
    if data_number_order:
        # –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 0
        if data_number_order[-1][-1]:
            insert_data_table_number_order(id_order=number_order, telegram_id=callback.message.chat.id, status_order=0)
        # –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –∫ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
        else:
            number_order = data_number_order[-1][1]
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    else:
        insert_data_table_number_order(id_order=number_order, telegram_id=callback.message.chat.id, status_order=0)
    create_table_orders()
    insert_data_table_orders(telegram_id=callback.message.chat.id, order_id=number_order, dish_id=id_dish, portion=1)
    list_category = select_all_category_table_dish()
    await state.update_data(portion=1)
    await state.update_data(id_dish=id_dish)
    await state.update_data(id_order=number_order)
    portion_old = select_data_table_orders_idorder_iddish(callback.message.chat.id, number_order, id_dish)
    await callback.message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ '
                                       f'{info_dish[1]}',
                                  reply_markup=keyboards_list_category(list_category))
    await callback.message.answer(text=f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π.',
                                  reply_markup=keyboard_select_portion(portion=portion_old[0][0]))
#
#
@router.callback_query(F.data.endswith('portion'))
async def press_button_payment_dish(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_payment_dish: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    portion = user_dict[callback.message.chat.id]['portion']
    if callback.data.split('_')[0] == 'plus':
        portion += 1
        await state.update_data(portion=portion)
    elif callback.data.split('_')[0] == 'minus':
        portion -= 1
        if portion >= 0:
            await state.update_data(portion=portion)
        else:
            portion = 0
    try:
        await callback.message.edit_text(text=f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π.',
                                         reply_markup=keyboard_select_portion(portion=portion))
    except:
        await callback.message.edit_text(text=f'–£–∫–∞–∂–∏—Çe –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π.',
                                         reply_markup=keyboard_select_portion(portion=portion))
#
#
@router.callback_query(F.data == 'order_dish')
async def press_button_order_dish(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_order_dish: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    if user_dict[callback.message.chat.id]['portion']:
        update_table_orders(telegram_id=callback.message.chat.id,
                            dish_id=user_dict[callback.message.chat.id]['id_dish'],
                            order_id=user_dict[callback.message.chat.id]['id_order'],
                            portion=user_dict[callback.message.chat.id]['portion'])
        await callback.message.answer(text='–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π –∑–∞–∫–∞–∑?',
                                      reply_markup=keyboard_continue_register())
    else:
        list_category = select_all_category_table_dish()
        keyboard = keyboards_list_category(list_category)
        await callback.message.answer(text=f"–ë–ª—é–¥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –±–ª—é–¥ üëá",
                                      reply_markup=keyboard)
#
#
@router.callback_query(F.data == 'cancel_order_dish')
async def press_button_cancel_order_dish(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_cancel_order_dish: {callback.message.chat.id}')
    list_category = select_all_category_table_dish()
    keyboard = keyboards_list_category(list_category)
    await callback.message.answer(text=f"–ë–ª—é–¥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –±–ª—é–¥ üëá",
                                  reply_markup=keyboard)


@router.callback_query(F.data == 'continue_order')
async def press_button_continue_order(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_continue_order: {callback.message.chat.id}')
    list_category = select_all_category_table_dish()
    keyboard = keyboards_list_category(list_category)
    await callback.message.answer(text=f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –±–ª—é–¥ üëá",
                                  reply_markup=keyboard)
#
#
@router.callback_query(F.data == 'register_order')
async def press_button_register_order(callback: CallbackQuery):
    logging.info(f'press_button_register_order: {callback.message.chat.id}')
    last_number_orders = select_row_table_number_order(callback.message.chat.id)[-1]
    print(last_number_orders)
    if last_number_orders[-1] == 0:
        order_id = last_number_orders[1]
        print('order_id', order_id)
        info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
        name = ''
        total = 0
        for i, info_order in enumerate(info_dish_last_order):
            info_dish = select_row_id_dish(info_order[3])
            name = name+f'{i+1}. {info_dish[1]}: {info_dish[2]} x {info_order[4]} = {info_dish[2] * info_order[4]} —Ä—É–±.\n'
            total += info_dish[2]*info_order[4]
        idorder = select_id_number_order(order_id)
        if total > 600:
            await callback.message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                               f'{name}\n\n'
                                               f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.',
                                          reply_markup=keyboard_confirm_register(order_id))
        else:
            await callback.message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                               f'{name}\n\n'
                                               f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.'
                                               f'\n\n'
                                               f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 600 —Ä—É–±.')
#

async def press_button_register_order1(callback: CallbackQuery):
    logging.info(f'press_button_register_order1: {callback.message.chat.id}')
    last_number_orders = select_row_table_number_order(callback.message.chat.id)[-1]
    print(last_number_orders)
    if last_number_orders[-1] == 0:
        order_id = last_number_orders[1]
        print('order_id', order_id)
        info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
        name = ''
        total = 0
        for i, info_order in enumerate(info_dish_last_order):
            info_dish = select_row_id_dish(info_order[3])
            name = name+f'{i+1}. {info_dish[1]}: {info_dish[2]} x {info_order[4]} = {info_dish[2] * info_order[4]} —Ä—É–±.\n'
            total += info_dish[2]*info_order[4]
        idorder = select_id_number_order(order_id)
        if total > 600:
            await callback.message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                               f'{name}\n\n'
                                               f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.',
                                          reply_markup=keyboard_confirm_register(order_id))
        else:
            await callback.message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                               f'{name}\n\n'
                                               f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.'
                                               f'\n\n'
                                               f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 600 —Ä—É–±.')

#
@router.callback_query(F.data.startswith('registerdone'))
async def press_button_register_all_done(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_register_all_done: {callback.message.chat.id}')
    print('press_button_register_all_done')
    id_order = callback.data.split('.')[1]
    # if id_order
    print('id_order-done', id_order)
    await state.update_data(register_order=id_order)
    update_status_table_number_id_order(status_order=1,
                                        telegram_id=callback.message.chat.id,
                                        id_order=id_order)
    await callback.message.answer_photo(photo="AgACAgIAAxkBAAIBN2XIkzZGPflWKE9lVJfjds9WZYihAAJO2zEbczhISsV6voCB0e5GAQADAgADeQADNAQ",
                                        caption=f'–ù–∞—à–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.'
                                                f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã):',
                                        reply_markup=keyboard_get_location())


@router.message(F.location)
async def process_get_location(message: Message, state: FSMContext):
    logging.info(f'process_get_location: {message.chat.id}')
    lat = message.location.latitude
    lon = message.location.longitude
    if check_adress_lon_alt(lon=lon, lat=lat):
        await message.answer(text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã):',
                             reply_markup=keyboards_main_menu())
        await state.set_state(Form_user.adress_user)
    else:
        await message.answer(text=f'–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω—ã',
                             reply_markup=keyboards_main_menu())

#
#
@router.message(F.text, StateFilter(Form_user.adress_user))
async def get_adress_user(message: Message, state: FSMContext):
    logging.info(f'get_adress_user: {message.chat.id}')
    if check_adress(adress=message.text):
        adress = message.text
        await state.update_data(adress=adress)
        user_dict[message.chat.id] = await state.get_data()
        update_status_table_number_adress(telegram_id=message.chat.id,
                                          id_order=user_dict[message.chat.id]['register_order'],
                                          adress_order=adress)
        await message.answer(text=f'–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?',
                             reply_markup=keyboard_pass_comment())
        await state.set_state(Form_user.comment_order)
    else:
        await message.answer(text=f'–í–∞—à –∞–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã.')


@router.callback_query(F.data == 'pass_comment' )
async def press_button_pass_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'press_button_pass_comment: {callback.message.chat.id}')
    logging.info(f'get_comment_order: {callback.message.chat.id}')
    comment = 'none'
    await state.update_data(comment=comment)
    update_status_table_number_comment(telegram_id=callback.message.chat.id,
                                       id_order=user_dict[callback.message.chat.id]['register_order'],
                                       comment=comment)
    await callback.message.answer(text=f'–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤—è—Ç –∏ —Å–∫–æ—Ä–æ –∫—É—Ä—å–µ—Ä –µ–≥–æ –ø—Ä–∏–≤–µ–∑–µ—Ç.\n'
                                       f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å.\n\n'
                                       f'–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª. +79112972946\n\n'
                                       f'–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –®–∞–≤–µ—Ä–≥—Ä–∞–¥!')
    list_manager = select_all_manager('manager')
    list_cook = select_all_manager('cook')
    info_user = select_row_table_users(callback.message.chat.id)
    text_manager = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'

    text_cook = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'

    for id_telegram_cook in list_cook:
        await bot.send_message(chat_id=id_telegram_cook,
                               text=text_cook)

    for id_telegram_manager in list_manager:
        user = get_telegram_user(id_telegram_manager, config.tg_bot.token)
        if 'result' in user:
            last_number_orders = select_row_table_number_order(callback.message.chat.id)[-1]
            order_id = last_number_orders[1]
            print('order_id', order_id)
            info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
            name = ''
            total = 0
            for i, info_order in enumerate(info_dish_last_order):
                info_dish = select_row_id_dish(info_order[3])
                name = name + f'{i + 1}. {info_dish[1]}: {info_dish[2]} x {info_order[4]} = {info_dish[2] * info_order[4]}—Ä—É–±.\n'
                total += info_dish[2] * info_order[4]
            print(id_telegram_manager)
            idorder = select_id_number_order(order_id)
            await bot.send_message(chat_id=id_telegram_manager,
                                   text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                        f'{name}\n\n'
                                        f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.\n\n'
                                        f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n'
                                        f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_dict[callback.message.chat.id]["adress"]}\n'
                                        f'–ò–º—è:{info_user[2]}\n'
                                        f'–¢–µ–ª–µ—Ñ–æ–Ω: {info_user[3]}')
        else:
            await bot.send_message(chat_id=config.tg_bot.admin_ids,
                                   text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é c id: {id_telegram_manager} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")

    await state.set_state(default_state)
    update_status_table_number_id_order(status_order=2,
                                        telegram_id=callback.message.chat.id,
                                        id_order=order_id)
#
@router.message(F.text, StateFilter(Form_user.comment_order))
async def get_comment_order(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'get_comment_order: {message.chat.id}')
    comment = message.text
    await state.update_data(comment=comment)
    update_status_table_number_comment(telegram_id=message.chat.id,
                                       id_order=user_dict[message.chat.id]['register_order'],
                                       comment=comment)
    await message.answer(text=f'–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤—è—Ç –∏ —Å–∫–æ—Ä–æ –∫—É—Ä—å–µ—Ä –µ–≥–æ –ø—Ä–∏–≤–µ–∑–µ—Ç.\n'
                              f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å.\n\n'
                              f'–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª. +79112972946\n\n'
                              f'–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –®–∞–≤–µ—Ä–≥—Ä–∞–¥!')

    list_manager = select_all_manager('manager')
    list_cook = select_all_manager('cook')
    info_user = select_row_table_users(message.chat.id)
    text_manager = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'
    call_to_phone()
    text_cook = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'

    for id_telegram_cook in list_cook:
        await bot.send_message(chat_id=id_telegram_cook,
                               text=text_cook)

    for id_telegram_manager in list_manager:
        user = get_telegram_user(id_telegram_manager, config.tg_bot.token)
        if 'result' in user:
            last_number_orders = select_row_table_number_order(message.chat.id)[-1]
            order_id = last_number_orders[1]
            print('order_id', order_id)
            info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
            name = ''
            total = 0
            for i, info_order in enumerate(info_dish_last_order):
                info_dish = select_row_id_dish(info_order[3])
                name = name + f'{i + 1}. {info_dish[1]}: {info_dish[2]} x {info_order[4]} = {info_dish[2] * info_order[4]}—Ä—É–±.\n'
                total += info_dish[2] * info_order[4]
            print(id_telegram_manager)
            idorder = select_id_number_order(order_id)
            await bot.send_message(chat_id=id_telegram_manager,
                                   text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                        f'{name}\n\n'
                                        f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.\n\n'
                                        f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n'
                                        f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_dict[message.chat.id]["adress"]}\n'
                                        f'–ò–º—è:{info_user[2]}\n'
                                        f'–¢–µ–ª–µ—Ñ–æ–Ω: {info_user[3]}')
        else:
            await bot.send_message(chat_id=config.tg_bot.admin_ids,
                                   text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é c id: {id_telegram_manager} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    await state.set_state(default_state)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–ó–î–ê–ù–ù–û–ì–û –ó–ê–ö–ê–ó–ê
@router.callback_query(F.data.startswith('registerchange'))
async def press_button_register_change(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_register_change: {callback.message.chat.id}')
    id_order = callback.data.split('.')[1]
    await state.update_data(register_order=id_order)
    print("id_order-change", id_order)
    print('all', select_data_table_orders())
    print('id_order', select_data_table_orders_to_order_id(id_order))
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ –µ–≥–æ id
    info_dish_last_order = select_data_table_orders_to_order_id(order_id=id_order)
    await state.update_data(list_dish_in_order=info_dish_last_order)
    await state.update_data(number_dish=0)
    print(info_dish_last_order)
    # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –±–ª—é–¥–æ –≤ –∑–∞–∫–∞–∑–µ
    number_dish = 0
    info_order = info_dish_last_order[number_dish]
    # id –ø–µ—Ä–≤–æ–≥–æ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ
    id_dish = info_order[3]
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ –ø–æ –µ–≥–æ id
    info_dish = select_row_id_dish(id_dish)
    await callback.message.answer_photo(photo=info_dish[5],
                                        caption=f'<b>{info_dish[1]}</b>\n'
                                                f'–°–æ—Å—Ç–∞–≤: {info_dish[4]}\n'
                                                f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_dish[2]} —Ä—É–±.\n',
                                        reply_markup=keyboard_change_order(portion=info_order[4]))


@router.callback_query(F.data.startswith('done_change'))
async def press_button_done_change(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_register_change: {callback.message.chat.id}')
    print('press_button_register_change')
    await press_button_register_order1(callback)


@router.callback_query(or_f(F.data == 'back_dish', F.data == 'forward_dish'))
async def press_button_done_change(callback: CallbackQuery, state: FSMContext):
    logging.info(f'press_button_done_change: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    list_dish_in_order = user_dict[callback.message.chat.id]['list_dish_in_order']
    count_dish = len(list_dish_in_order)
    print("count_dish", count_dish)
    number_dish = user_dict[callback.message.chat.id]['number_dish']
    print("number_dish", number_dish)
    if callback.data == 'back_dish':
        print('back_dish')
        if number_dish > 0:
            number_dish -= 1
    elif callback.data == 'forward_dish':
        print('forward_dish')
        if number_dish < count_dish-1:
            number_dish += 1
    await state.update_data(number_dish=number_dish)
    info_order = list_dish_in_order[number_dish]
    id_dish = info_order[3]
    info_dish = select_row_id_dish(id_dish)
    await callback.message.answer_photo(photo=info_dish[5],
                                        caption=f'<b>{info_dish[1]}</b>\n'
                                                f'–°–æ—Å—Ç–∞–≤: {info_dish[4]}\n'
                                                f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_dish[2]} —Ä—É–±.\n',
                                        reply_markup=keyboard_change_order(portion=info_order[4]))


@router.callback_query(or_f(F.data.startswith('minus_portion_edit'), F.data.startswith('plus_portion_edit')))
async def press_button_done_change(callback: CallbackQuery, state: FSMContext):
    user_dict[callback.message.chat.id] = await state.get_data()
    list_dish_in_order = user_dict[callback.message.chat.id]['list_dish_in_order']
    number_dish = user_dict[callback.message.chat.id]['number_dish']
    info_order = list_dish_in_order[number_dish]
    id_dish = info_order[3]
    order_id = info_order[2]
    portion = select_data_table_orders_idorder_iddish(telegram_id=callback.message.chat.id,
                                                      order_id=order_id,
                                                      dish_id=id_dish)[0][0]
    print('portion', portion)
    if 'minus_portion_' in callback.data:
        print('minus_portion_')
        portion = portion - 1
    elif 'plus_portion_' in callback.data:
        print('plus_portion_')
        portion = portion + 1

    if portion > 0:
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
        update_table_orders(telegram_id=callback.message.chat.id,
                            dish_id=id_dish,
                            order_id=order_id,
                            portion=portion)
        print('portion', portion)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ
        info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)

        print(info_dish_last_order)
        await state.update_data(list_dish_in_order=info_dish_last_order)
        list_dish_in_order = user_dict[callback.message.chat.id]['list_dish_in_order']
        print(list_dish_in_order)
        info_order = info_dish_last_order[number_dish]
        print(info_order)
        # for order in info_dish_last_order:
        #     if order[3] == id_dish:
        #         info_order = order

        info_dish = select_row_id_dish(id_dish)
        await callback.message.edit_caption(photo=info_dish[5],
                                            caption=f'<b>{info_dish[1]}</b>\n'
                                                    f'–°–æ—Å—Ç–∞–≤: {info_dish[4]}\n'
                                                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_dish[2]} —Ä—É–±.\n',
                                            reply_markup=keyboard_change_order(portion=info_order[4]))
    else:
        print('portion<1')
        delete_table_orders(dish_id=id_dish,
                            order_id=order_id)
        info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
        print(info_dish_last_order)
        await state.update_data(list_dish_in_order=info_dish_last_order)
        # list_dish_in_order = user_dict[callback.message.chat.id]['list_dish_in_order']
        try:
            number_dish = 0
            info_order = info_dish_last_order[number_dish]
            await state.update_data(number_dish=number_dish)
            info_dish = select_row_id_dish(info_order[3])
            await callback.message.answer_photo(photo=info_dish[5],
                                                caption=f'<b>{info_dish[1]}</b>\n'
                                                        f'–°–æ—Å—Ç–∞–≤: {info_dish[4]}\n'
                                                        f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_dish[2]} —Ä—É–±.\n',
                                                reply_markup=keyboard_change_order(portion=info_order[4]))
        except:
            list_category = select_all_category_table_dish()
            keyboard = keyboards_list_category(list_category)
            await callback.message.answer(text=f"–ë–ª—é–¥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –±–ª—é–¥ üëá",
                                          reply_markup=keyboard)

@router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def press_button_cart(message: Message):
    logging.info(f"press_button_cart, {len(select_row_table_number_order(message.chat.id))}")
    rrr = select_row_table_number_order(message.chat.id)
    print(rrr)
    if select_row_table_number_order(message.chat.id):
        last_number_orders=select_row_table_number_order(message.chat.id)[-1]
        order_id = last_number_orders[1]
        print('order_id', order_id)
        info_dish_last_order = select_data_table_orders_to_order_id(order_id=order_id)
        name = ''
        total = 0
        for i, info_order in enumerate(info_dish_last_order):
            info_dish = select_row_id_dish(info_order[3])
            name = name + f'{i + 1}. {info_dish[1]}: {info_dish[2]} x {info_order[4]} = {info_dish[2] * info_order[4]}—Ä—É–±.\n'
            total += info_dish[2] * info_order[4]
        idorder = select_id_number_order(order_id)
        if total > 600:
            await message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                      f'{name}\n\n'
                                      f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.',
                                 reply_markup=keyboard_confirm_register(order_id))
        else:
            await message.answer(text=f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {idorder[0]}\n'
                                      f'{name}\n\n'
                                      f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.'
                                      f'\n\n'
                                      f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 600 —Ä—É–±.')
    else:
        await message.answer(text='–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!')